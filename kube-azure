#!/bin/bash

set -e

function cleanup() {
	rm "$configFile" > /dev/null 2>&1 || true
	rm "${configFile}e" > /dev/null 2>&1 || true
	rmdir "$tempDirectory" > /dev/null 2>&1 || true
}

trap "cleanup" EXIT

tempDirectory="$(mktemp -d)"
configFile="$tempDirectory/config"

if [[ -z "$1" ]]; then
	groupsJson="$(az group list --query "[? !starts_with(name,'MC') && name!='NetworkWatcherRG'].name" -o json)"
	groupCount="$(echo "$groupsJson" | jq ". | length")"

	if [[ "$groupCount" == 1 ]]; then
		resourceGroup="$(echo "$groupsJson" | jq -r ".[0]")"
	else
		echo "Please select resource group. Multiple resource groups available: $(echo "$groupsJson" | jq -r ". | join(\", \")")."
		echo "Usage: $0 [<resourceGroup>] [<cluster>]"
		exit 1
	fi
else
	resourceGroup="$1"
	shift
fi

if [[ -z "$1" ]]; then
	clustersJson="$(az aks list -o json --query [].name)"
	clusterCount="$(echo "$clustersJson" | jq ". | length")"

	if [[ "$clusterCount" == 1 ]]; then
		cluster="$(echo "$clustersJson" | jq -r ".[0]")"
	elif [[ "$clusterCount" == 0 ]]; then
		echo >&2 "No AKS clusters found"
		exit 1
	else
		echo >&2 "Please select cluster. Multiple AKS clusters available: $(echo "$clustersJson" | jq -r ". | join(\", \")")."
		echo >&2 "Usage: $0 [<resourceGroup>] [<cluster>]"
		exit 1
	fi
else
	cluster="$1"
	shift
fi

echo "Downloading kubectl config..."

az aks get-credentials --name "$cluster" --resource-group "$resourceGroup" --file - > "$configFile"
chmod 600 "$configFile"
subscriptionName="$(az account show -o json | jq -r '.name')"

export KUBECONFIG="$configFile"
export DOCKER_MACHINE_NAME="k8s:$subscriptionName:$cluster"


if [[ -z "$1" ]]; then
	fish
else
	"$@"
fi
